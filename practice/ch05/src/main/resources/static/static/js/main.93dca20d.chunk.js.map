{"version":3,"sources":["services/ApiClient.js","components/LastAttemptsComponent.js","components/ChallengeComponent.js","App.js","serviceWorker.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","console","log","GET_ATTEMPTS_BY_ALIAS","LastAttemptsComponent","this","props","lastAttempts","map","key","id","style","color","correct","resultAttempt","React","ChallengeComponent","state","message","handleSubmitResult","bind","handleChange","refreshChallenge","challenge","then","res","ok","json","setState","updateMessage","event","name","target","value","preventDefault","sendGuess","updateLastAttempts","m","getAttempts","attempts","data","forEach","item","push","className","onSubmit","type","maxLength","onChange","min","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.93dca20d.chunk.js","sourcesContent":["class ApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n\n    static challenge(): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            });\n    }\n\n    static getAttempts(userAlias: string): Promise<Response> {\n        console.log('Get attempts for '+userAlias);\n        return fetch(ApiClient.SERVER_URL +\n            ApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n    }\n}\n\nexport default ApiClient;\n","import * as React from 'react';\n\nclass LastAttemptsComponent extends React.Component {\n\n    render() {\n        return (\n            <table>\n                <thead>\n                <tr>\n                    <th>Challenge</th>\n                    <th>Your guess</th>\n                    <th>Correct</th>\n                </tr>\n                </thead>\n                <tbody>\n                {this.props.lastAttempts.map(a =>\n                    <tr key={a.id}\n                        style={{ color: a.correct ? 'green' : 'red' }}>\n                        <td>{a.factorA} x {a.factorB}</td>\n                        <td>{a.resultAttempt}</td>\n                        <td>{a.correct ? \"Correct\" :\n                            (\"Incorrect (\" + a.factorA * a.factorB + \")\")}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default LastAttemptsComponent;\n","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\nimport LastAttemptsComponent from './LastAttemptsComponent';\n\nclass ChallengeComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            a: '', b: '',\n            user: '',\n            message: '',\n            guess: 0,\n            lastAttempts: [],\n        };\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.refreshChallenge();\n    }\n\n    refreshChallenge() {\n        ApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        });\n                    });\n                } else {\n                    this.updateMessage(\"Can't reach the server\");\n                }\n            }\n        );\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess(this.state.user,\n            this.state.a, this.state.b,\n            this.state.guess)\n            .then(res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        if (json.correct) {\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\n                        } else {\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\n                            \" is wrong, but keep playing!\");\n                        }\n                        this.updateLastAttempts(this.state.user);\n                        this.refreshChallenge();\n                    });\n                } else {\n                   this.updateMessage(\"Error: server error or not available\");\n                }\n            });\n    }\n\n    updateMessage(m: string) {\n        this.setState({\n          message: m\n        });\n    }\n\n    updateLastAttempts(userAlias: string) {\n        ApiClient.getAttempts(userAlias).then(res => {\n            if (res.ok) {\n                let attempts: Attempt[] = [];\n                res.json().then(data => {\n                    data.forEach(item => {\n                        attempts.push(item);\n                    });\n                    this.setState({\n                        lastAttempts: attempts\n                    });\n                })\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"display-column\">\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <div className=\"challenge\">\n                        {this.state.a} x {this.state.b}\n                    </div>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input type=\"text\" maxLength=\"12\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input type=\"number\" min=\"0\"\n                               name=\"guess\"\n                               value={this.state.guess}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n                {this.state.lastAttempts.length > 0 &&\n                    <LastAttemptsComponent lastAttempts={this.state.lastAttempts}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;\n","import React from 'react';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n    return <ChallengeComponent/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}